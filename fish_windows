# set -U fish_greeting ""
# function fish_greeting
#     set -l quotes (jq -r '.quotes[].quote' $HOME/notes/quote.json)
#     set -l random_index (shuf -i 1-(count $quotes) -n 1)
#     set -l random_quote (echo $quotes[$random_index])
#
#     # Add the border to the random quote
#     set -l border " -------------------------"
#     set -l bordered_quote (echo $border)
#     echo $random_quote
#     echo $bordered_quote
# end

function fish_greeting
    if test -e $HOME/notes/markdown/todotoday.md
        set -l todos 9 # number of todo's displayed
        set -l todo_items (awk '!/<!--/ && !/-->/ && !/\[x\]/ && !/^[[:space:]]*$/' $HOME/notes/markdown/todotoday.md | head -n $todos)

        echo -e "\e[32mTODO $(date '+%d-%b-%Y'):\e[0m"
        for todo_item in $todo_items
            echo "$todo_item"
        end
    else
        echo "No todo list found. Add todotoday.md in your home directory to start"

    end
end

function start_bot
    cd /mnt/d/git/chatgpt-telegram-bot
    python3 -m venv venv
    source venv/bin/activate.fish
    python3 bot/main.py
end

function preview_nvim
 # find . -maxdepth 3 -type f | grep -v '/\.' | fzf -i --cycle --preview="cat {}" --bind 'enter:become(nvim {})' 
 fdfind --type f | fzf -i --reverse  --cycle --preview-window noborder  --prompt="> " --marker=">" --pointer="â—†" --scrollbar="" --layout="reverse" --preview="bat --paging never --decorations never --wrap character --color always  {}" --bind 'enter:become(nvim {})'
 # find . -maxdepth 3 -type f -not -path '*/\.*' | fzf -i --cycle --preview="bat --color=always {}" --bind 'enter:execute(nvim {})'

end
# =======================
# Function: ee
# Description: Edit a file using neovim-remote (nvr) and exit the shell afterward.
# Usage: ee <filename>
# Example: ee myfile.txt
# =======================
function ee
    nvr --remote $argv && exit
    # Switch to the last buffer in the current window
    execute "buffer #"
end
# Bind alt+d to the function and alt+0
bind \eo 'nvim -c "lua setupHistory()"'
bind \ed 'preview_nvim'
bind \en 'yazi'
# bind \el 'vide .'

# ==== ALIAS ====
# Add this to your fish configuration file (usually ~/.config/fish/config.fish)



# alias nvr='py /home/genie/.local/lib/python3.11/site-packages/nvr/nvr.py'
alias o='nvim -c "lua setupHistory()"'
alias man='tldr'
alias ra='lf'
alias pw='powershell.exe'
alias gi='git clone'
alias v='vide'
alias telescope_file_browser='glow --width 90 /home/genie/telescope_file_browser.md'
alias _n='nvim +"History"'
alias open="firefox.exe"
alias pr="python3 $HOME/private.py"
alias gcc-11="gcc"
alias i="sudo apt install"
alias r="sudo apt remove"
alias e="explorer.exe"
alias vide="neovide.exe  --frame none --maximized --no-fork --wsl"
alias ls="eza"
alias mk="mkdir"
alias t="todo.sh"
alias tg=start_bot
alias py="python3"
alias fd="fdfind"
alias tar="tar -xzvf"
alias rm="rm -rf"
alias cp="cp -rf"
alias todo="fish_greeting"
alias l "lazygit"
alias gt "git status"
alias dot 'cp -r /home/genie/.config/nvim/* /mnt/d/git/dotfiles/astronvim.lua/; cd /mnt/d/git/dotfiles/; git commit astronvim.lua/* -m "refactor" && git push'
# alias tar="tar -xzf"
alias explorer "explorer.exe"
alias n "nvim"
alias rr 'git commit learni\ notes.md readme.md -m "refactor" && git push'
alias sx 'browser-sync start --server --files "*.html"'
if set -q WSLENV
    set -gx PATH $HOME/bin/win-bash-xclip-xsel $PATH
end

# ===PATH===
   set -x PATH "$HOME/bin/win-bash-xclip-xsel" $PATH
   set -gx PATH "/home/genie/.local/bin/nvim-linux64/bin" $PATH
   set -gx PATH "/home/genie/go/bin" $PATH
   set -gx PATH "/home/genie/.local/bin" $PATH
   set -gx PATH "/home/genie/tmp/yazi-x86_64-unknown-linux-gnu/yazi-x86_64-unknown-linux-gnu/" $PATH
   # set -gx PATH "/home/genie/.local/lib/python3.11/site-packages/nvr" $PATH
   set -gx PATH "/home/genie/.local/share/nvim/mason/bin" $PATH
   set -x PATH "/home/genie" $PATH 
   set -x PATH "/home/genie/.deno/bin/" $PATH 
   set -gx PATH $HOME/.yarn/bin $PATH
   set -x LS_COLORS (printf "%s:ow=" $LS_COLORS)
   set -x PATH $PATH /home/genie/.local/bin/bin
      set -x ESLINT_CONFIG_PATH ~/.eslint
      set -x EDITOR nvim
      set -x $EDITOR nvim
set -x PATH $PATH ~/.bun/bin

# ===tab to select autosuggestion===
# function fish_user_key_bindings
#     bind \t 'commandline -f accept-autosuggestion'
# end

# ===theme for fish prompt===
set -g theme_display_git no
set -g theme_display_git_dirty no
set -g theme_display_git_untracked no
set -g theme_display_git_ahead_verbose yes
set -g theme_display_git_dirty_verbose yes
set -g theme_display_git_stashed_verbose yes
set -g theme_display_git_default_branch yes
set -g theme_git_default_branches master main
set -g theme_git_worktree_support yes
set -g theme_use_abbreviated_branch_name yes
set -g theme_display_node yes
set -g theme_display_user ssh
set -g theme_display_vi no
set -g theme_display_date no
set -g theme_display_cmd_duration yes
set -g theme_title_display_process yes
set -g theme_title_display_path yes
set -g theme_avoid_ambiguous_glyphs yes
set -g theme_powerline_fonts yes
set -g theme_nerd_fonts yes
set -g theme_show_exit_status yes
set -g theme_display_jobs_verbose yes
set -g fish_term256 1


set -x NNN_FIFO /tmp/nnn.fifo
set -x NNN_PLUG "p:preview-tui;z:autojump"
# write curl download lscolors to fish directory
source $HOME/.config/fish/lscolors.csh
# jump command
jump shell fish | source
function lfcd --wraps="lf" --description="lf - Terminal file manager (changing directory on exit)"
    # `command` is needed in case `lfcd` is aliased to `lf`.
    # Quotes will cause `cd` to not change directory if `lf` prints nothing to stdout due to an error.
    cd "$(command lf -print-last-dir $argv)"
end
set -x FZF_DEFAULT_OPTS "--bind=Tab:down --color=fg:-1,fg+:#d0d0d0,bg:-1,bg+:-1
  --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
  --color=prompt:#d7005f,spinner:-1,pointer:-1,header:#87afaf
  --color=border:-1,label:#aeaeae,query:#d9d9d9"


function miner
  z miner
  python3 -m venv myven
    source myvenv/bin/activate.fish
  python3 run.py
end
function sw
set current_dir (pwd)
cd /home/genie/.ssh
     if test -f seraph
        mv id_rsa may
        mv id_rsa.pub may.pub
        mv seraph id_rsa
        mv seraph.pub id_rsa.pub
        echo " === seraph ssh loaded === "
    else if test -f may
        mv id_rsa seraph
        mv id_rsa.pub seraph.pub
        mv may id_rsa
        mv may.pub id_rsa.pub
        echo " === may ssh loaded === "
    else
        echo "Neither seraph nor may file found."
    end
cd $current_dir
sudo chmod 600 ~/.ssh/id_rsa
sudo chmod 600 ~/.ssh/id_rsa.pub
end
  
function se 
  echo "Enter the date (e.g., Mar 18, Apr  1):"
  read date
  echo "Files modified on $date:"
find /mnt/c/SteamLibrary/steamapps/workshop/content/108600 -type d -name .git -prune -o -type f -exec ls -lt {} + | grep $date
  echo "Do you want to open these files in Neovim? (y/n)"
    read open_files
      if test "$open_files" = "y"
          find /mnt/c/SteamLibrary/steamapps/workshop/content/108600 -type d -name .git -prune -o -type f -exec ls -lt {} + | grep $date | awk '{print $NF}' | xargs -d '\n' nvim
      else
          echo "Files not opened."
      end
end
